# -*- coding: utf-8 -*-
"""LossFunctions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AdK1dwjrWsoRCn0HB1tfM-BLe0NMINlw
"""



import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Define true values (y_true) and model predictions (y_pred)
y_true = tf.constant([1.0, 0.0, 0.0, 1.0, 0.0])  # True labels (binary or one-hot encoded)
y_pred = tf.constant([0.9, 0.1, 0.2, 0.8, 0.3])  # Model predictions (probabilities)

# Step 2: Compute Mean Squared Error (MSE) and Categorical Cross-Entropy (CCE) losses
def compute_losses(y_true, y_pred):
    # Mean Squared Error (MSE)
    mse_loss = tf.reduce_mean(tf.square(y_true - y_pred))

    # Categorical Cross-Entropy (CCE)
    cce_loss = tf.reduce_mean(tf.keras.losses.binary_crossentropy(y_true, y_pred))

    return mse_loss.numpy(), cce_loss.numpy()

# Initial losses
mse_loss, cce_loss = compute_losses(y_true, y_pred)
print("Initial MSE Loss:", mse_loss)
print("Initial CCE Loss:", cce_loss)
print()

# Step 3: Modify predictions slightly and check how loss values change
y_pred_modified = y_pred + tf.constant([-0.1, 0.05, 0.1, -0.05, 0.0])  # Slightly modified predictions
mse_loss_modified, cce_loss_modified = compute_losses(y_true, y_pred_modified)
print("Modified MSE Loss:", mse_loss_modified)
print("Modified CCE Loss:", cce_loss_modified)
print()

# Step 4: Plot loss function values using Matplotlib
labels = ['MSE Loss', 'CCE Loss']
initial_losses = [mse_loss, cce_loss]
modified_losses = [mse_loss_modified, cce_loss_modified]

x = np.arange(len(labels))  # Label locations
width = 0.35  # Width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, initial_losses, width, label='Initial Predictions')
rects2 = ax.bar(x + width/2, modified_losses, width, label='Modified Predictions')

# Add labels, title, and legend
ax.set_xlabel('Loss Function')
ax.set_ylabel('Loss Value')
ax.set_title('Comparison of MSE and CCE Loss')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

# Add value labels on top of the bars
def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        ax.annotate(f'{height:.4f}',
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.tight_layout()
plt.show()